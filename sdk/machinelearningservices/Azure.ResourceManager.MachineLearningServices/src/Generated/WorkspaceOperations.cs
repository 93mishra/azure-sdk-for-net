// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.MachineLearningServices.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.MachineLearningServices
{
    /// <summary> A class representing the operations that can be performed over a specific Workspace. </summary>
    public partial class WorkspaceOperations : ResourceOperations
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private WorkspacesRestOperations _restClient { get; }
        private PrivateLinkResourcesRestOperations _privateLinkResourcesRestClient { get; }
        private WorkspaceFeaturesRestOperations _workspaceFeaturesRestClient { get; }

        /// <summary> Initializes a new instance of the <see cref="WorkspaceOperations"/> class for mocking. </summary>
        protected WorkspaceOperations()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="WorkspaceOperations"/> class. </summary>
        /// <param name="options"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        protected internal WorkspaceOperations(ResourceOperations options, ResourceIdentifier id) : base(options, id)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _restClient = new WorkspacesRestOperations(_clientDiagnostics, Pipeline, Id.SubscriptionId, BaseUri);
            _privateLinkResourcesRestClient = new PrivateLinkResourcesRestOperations(_clientDiagnostics, Pipeline, Id.SubscriptionId, BaseUri);
            _workspaceFeaturesRestClient = new WorkspaceFeaturesRestOperations(_clientDiagnostics, Pipeline, Id.SubscriptionId, BaseUri);
        }

        /// <summary> Gets the resource type for the operations. </summary>
        public static readonly ResourceType ResourceType = "Microsoft.MachineLearningServices/workspaces";
        /// <summary> Gets the valid resource type for the operations. </summary>
        protected override ResourceType ValidResourceType => ResourceType;

        /// <summary> Gets the properties of the specified machine learning workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<Workspace>> GetAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.Get");
            scope.Start();
            try
            {
                var response = await _restClient.GetAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new Workspace(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of the specified machine learning workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<Workspace> Get(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.Get");
            scope.Start();
            try
            {
                var response = _restClient.Get(Id.ResourceGroupName, Id.Name, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new Workspace(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public async virtual Task<IEnumerable<Location>> GetAvailableLocationsAsync(CancellationToken cancellationToken = default)
        {
            return await ListAvailableLocationsAsync(ResourceType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        public virtual IEnumerable<Location> GetAvailableLocations(CancellationToken cancellationToken = default)
        {
            return ListAvailableLocations(ResourceType, cancellationToken);
        }

        /// <summary> Deletes a machine learning workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response> DeleteAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.Delete");
            scope.Start();
            try
            {
                var operation = await StartDeleteAsync(cancellationToken).ConfigureAwait(false);
                return await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a machine learning workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Delete(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.Delete");
            scope.Start();
            try
            {
                var operation = StartDelete(cancellationToken);
                return operation.WaitForCompletion(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a machine learning workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<WorkspaceDeleteOperation> StartDeleteAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.StartDelete");
            scope.Start();
            try
            {
                var response = await _restClient.DeleteAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return new WorkspaceDeleteOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeleteRequest(Id.ResourceGroupName, Id.Name).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a machine learning workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual WorkspaceDeleteOperation StartDelete(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.StartDelete");
            scope.Start();
            try
            {
                var response = _restClient.Delete(Id.ResourceGroupName, Id.Name, cancellationToken);
                return new WorkspaceDeleteOperation(_clientDiagnostics, Pipeline, _restClient.CreateDeleteRequest(Id.ResourceGroupName, Id.Name).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
        /// <summary> Updates a machine learning workspace with the specified parameters. </summary>
        /// <param name="parameters"> The parameters for updating a machine learning workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public virtual async Task<Response<Workspace>> UpdateAsync(WorkspaceUpdateParameters parameters, CancellationToken cancellationToken = default)
        {
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.Update");
            scope.Start();
            try
            {
                var response = await _restClient.UpdateAsync(Id.ResourceGroupName, Id.Name, parameters, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(new Workspace(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates a machine learning workspace with the specified parameters. </summary>
        /// <param name="parameters"> The parameters for updating a machine learning workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="parameters"/> is null. </exception>
        public virtual Response<Workspace> Update(WorkspaceUpdateParameters parameters, CancellationToken cancellationToken = default)
        {
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.Update");
            scope.Start();
            try
            {
                var response = _restClient.Update(Id.ResourceGroupName, Id.Name, parameters, cancellationToken);
                return Response.FromValue(new Workspace(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all the keys associated with this workspace. This includes keys for the storage account, app insights and password for container registry. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ListWorkspaceKeysResult>> GetKeysAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.GetKeys");
            scope.Start();
            try
            {
                var response = await _restClient.GetKeysAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all the keys associated with this workspace. This includes keys for the storage account, app insights and password for container registry. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ListWorkspaceKeysResult> GetKeys(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.GetKeys");
            scope.Start();
            try
            {
                var response = _restClient.GetKeys(Id.ResourceGroupName, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> return notebook access token and refresh token. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<NotebookAccessTokenResult>> GetNotebookAccessTokenAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.GetNotebookAccessToken");
            scope.Start();
            try
            {
                var response = await _restClient.GetNotebookAccessTokenAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> return notebook access token and refresh token. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NotebookAccessTokenResult> GetNotebookAccessToken(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.GetNotebookAccessToken");
            scope.Start();
            try
            {
                var response = _restClient.GetNotebookAccessToken(Id.ResourceGroupName, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ListStorageAccountKeysResult>> GetStorageAccountKeysAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.GetStorageAccountKeys");
            scope.Start();
            try
            {
                var response = await _restClient.GetStorageAccountKeysAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ListStorageAccountKeysResult> GetStorageAccountKeys(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.GetStorageAccountKeys");
            scope.Start();
            try
            {
                var response = _restClient.GetStorageAccountKeys(Id.ResourceGroupName, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ListNotebookKeysResult>> GetNotebookKeysAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.GetNotebookKeys");
            scope.Start();
            try
            {
                var response = await _restClient.GetNotebookKeysAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ListNotebookKeysResult> GetNotebookKeys(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.GetNotebookKeys");
            scope.Start();
            try
            {
                var response = _restClient.GetNotebookKeys(Id.ResourceGroupName, Id.Name, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the private link resources that need to be created for a workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<PrivateLinkResource>>> GetPrivateLinkResourcesAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.GetPrivateLinkResources");
            scope.Start();
            try
            {
                var response = await _privateLinkResourcesRestClient.GetAllAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value.Value, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the private link resources that need to be created for a workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<PrivateLinkResource>> GetPrivateLinkResources(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.GetPrivateLinkResources");
            scope.Start();
            try
            {
                var response = _privateLinkResourcesRestClient.GetAll(Id.ResourceGroupName, Id.Name, cancellationToken);
                return Response.FromValue(response.Value.Value, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all enabled features for a workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AmlUserFeature" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AmlUserFeature> GetWorkspaceFeatures(CancellationToken cancellationToken = default)
        {
            Page<AmlUserFeature> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.GetWorkspaceFeatures");
                scope.Start();
                try
                {
                    var response = _workspaceFeaturesRestClient.GetAll(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AmlUserFeature> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.GetWorkspaceFeatures");
                scope.Start();
                try
                {
                    var response = _workspaceFeaturesRestClient.GetAllNextPage(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Lists all enabled features for a workspace. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AmlUserFeature" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AmlUserFeature> GetWorkspaceFeaturesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<AmlUserFeature>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.GetWorkspaceFeatures");
                scope.Start();
                try
                {
                    var response = await _workspaceFeaturesRestClient.GetAllAsync(Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AmlUserFeature>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.GetWorkspaceFeatures");
                scope.Start();
                try
                {
                    var response = await _workspaceFeaturesRestClient.GetAllNextPageAsync(nextLink, Id.ResourceGroupName, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Resync all the keys associated with this workspace. This includes keys for the storage account, app insights and password for container registry. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response> ResyncKeysAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.ResyncKeys");
            scope.Start();
            try
            {
                var operation = await StartResyncKeysAsync(cancellationToken).ConfigureAwait(false);
                return await operation.WaitForCompletionResponseAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Resync all the keys associated with this workspace. This includes keys for the storage account, app insights and password for container registry. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response ResyncKeys(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.ResyncKeys");
            scope.Start();
            try
            {
                var operation = StartResyncKeys(cancellationToken);
                return operation.WaitForCompletion(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Resync all the keys associated with this workspace. This includes keys for the storage account, app insights and password for container registry. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<WorkspaceResyncKeysOperation> StartResyncKeysAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.StartResyncKeys");
            scope.Start();
            try
            {
                var response = await _restClient.ResyncKeysAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return new WorkspaceResyncKeysOperation(_clientDiagnostics, Pipeline, _restClient.CreateResyncKeysRequest(Id.ResourceGroupName, Id.Name).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Resync all the keys associated with this workspace. This includes keys for the storage account, app insights and password for container registry. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual WorkspaceResyncKeysOperation StartResyncKeys(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.StartResyncKeys");
            scope.Start();
            try
            {
                var response = _restClient.ResyncKeys(Id.ResourceGroupName, Id.Name, cancellationToken);
                return new WorkspaceResyncKeysOperation(_clientDiagnostics, Pipeline, _restClient.CreateResyncKeysRequest(Id.ResourceGroupName, Id.Name).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<Response<NotebookResourceInfo>> PrepareNotebookAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.PrepareNotebook");
            scope.Start();
            try
            {
                var operation = await StartPrepareNotebookAsync(cancellationToken).ConfigureAwait(false);
                return await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<NotebookResourceInfo> PrepareNotebook(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.PrepareNotebook");
            scope.Start();
            try
            {
                var operation = StartPrepareNotebook(cancellationToken);
                return operation.WaitForCompletion(cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async virtual Task<WorkspacePrepareNotebookOperation> StartPrepareNotebookAsync(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.StartPrepareNotebook");
            scope.Start();
            try
            {
                var response = await _restClient.PrepareNotebookAsync(Id.ResourceGroupName, Id.Name, cancellationToken).ConfigureAwait(false);
                return new WorkspacePrepareNotebookOperation(_clientDiagnostics, Pipeline, _restClient.CreatePrepareNotebookRequest(Id.ResourceGroupName, Id.Name).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual WorkspacePrepareNotebookOperation StartPrepareNotebook(CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WorkspaceOperations.StartPrepareNotebook");
            scope.Start();
            try
            {
                var response = _restClient.PrepareNotebook(Id.ResourceGroupName, Id.Name, cancellationToken);
                return new WorkspacePrepareNotebookOperation(_clientDiagnostics, Pipeline, _restClient.CreatePrepareNotebookRequest(Id.ResourceGroupName, Id.Name).Request, response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a list of ComputeResources in the Workspace. </summary>
        /// <returns> An object representing collection of ComputeResources and their operations over a Workspace. </returns>
        public ComputeResourceContainer GetComputeResources()
        {
            return new ComputeResourceContainer(this);
        }

        /// <summary> Gets a list of PrivateEndpointConnections in the Workspace. </summary>
        /// <returns> An object representing collection of PrivateEndpointConnections and their operations over a Workspace. </returns>
        public PrivateEndpointConnectionContainer GetPrivateEndpointConnections()
        {
            return new PrivateEndpointConnectionContainer(this);
        }

        /// <summary> Gets a list of WorkspaceConnections in the Workspace. </summary>
        /// <returns> An object representing collection of WorkspaceConnections and their operations over a Workspace. </returns>
        public WorkspaceConnectionContainer GetWorkspaceConnections()
        {
            return new WorkspaceConnectionContainer(this);
        }

        /// <summary> Gets a list of BatchEndpointTrackedResources in the Workspace. </summary>
        /// <returns> An object representing collection of BatchEndpointTrackedResources and their operations over a Workspace. </returns>
        public BatchEndpointTrackedResourceContainer GetBatchEndpointTrackedResources()
        {
            return new BatchEndpointTrackedResourceContainer(this);
        }

        /// <summary> Gets a list of CodeContainerResources in the Workspace. </summary>
        /// <returns> An object representing collection of CodeContainerResources and their operations over a Workspace. </returns>
        public CodeContainerResourceContainer GetCodeContainerResources()
        {
            return new CodeContainerResourceContainer(this);
        }

        /// <summary> Gets a list of DataContainerResources in the Workspace. </summary>
        /// <returns> An object representing collection of DataContainerResources and their operations over a Workspace. </returns>
        public DataContainerResourceContainer GetDataContainerResources()
        {
            return new DataContainerResourceContainer(this);
        }

        /// <summary> Gets a list of DatastorePropertiesResources in the Workspace. </summary>
        /// <returns> An object representing collection of DatastorePropertiesResources and their operations over a Workspace. </returns>
        public DatastorePropertiesResourceContainer GetDatastorePropertiesResources()
        {
            return new DatastorePropertiesResourceContainer(this);
        }

        /// <summary> Gets a list of EnvironmentContainerResources in the Workspace. </summary>
        /// <returns> An object representing collection of EnvironmentContainerResources and their operations over a Workspace. </returns>
        public EnvironmentContainerResourceContainer GetEnvironmentContainerResources()
        {
            return new EnvironmentContainerResourceContainer(this);
        }

        /// <summary> Gets a list of JobBaseResources in the Workspace. </summary>
        /// <returns> An object representing collection of JobBaseResources and their operations over a Workspace. </returns>
        public JobBaseResourceContainer GetJobBaseResources()
        {
            return new JobBaseResourceContainer(this);
        }

        /// <summary> Gets a list of LabelingJobResources in the Workspace. </summary>
        /// <returns> An object representing collection of LabelingJobResources and their operations over a Workspace. </returns>
        public LabelingJobResourceContainer GetLabelingJobResources()
        {
            return new LabelingJobResourceContainer(this);
        }

        /// <summary> Gets a list of ModelContainerResources in the Workspace. </summary>
        /// <returns> An object representing collection of ModelContainerResources and their operations over a Workspace. </returns>
        public ModelContainerResourceContainer GetModelContainerResources()
        {
            return new ModelContainerResourceContainer(this);
        }

        /// <summary> Gets a list of OnlineEndpointTrackedResources in the Workspace. </summary>
        /// <returns> An object representing collection of OnlineEndpointTrackedResources and their operations over a Workspace. </returns>
        public OnlineEndpointTrackedResourceContainer GetOnlineEndpointTrackedResources()
        {
            return new OnlineEndpointTrackedResourceContainer(this);
        }
    }
}
