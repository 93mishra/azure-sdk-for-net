// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.MachineLearningServices.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.MachineLearningServices
{
   
    /// <summary> A class representing the operations that can be performed over a specific ModelContainerResource. </summary>
    public partial class ModelContainerResourceOperations : ArmResource
    {
        /// <summary> Gets the resource type for the operations. </summary>
        public static ResourceType ResourceType => throw new NotImplementedException();

        /// <summary> Gets the valid resource type for the operations. </summary>
        protected override ResourceType ValidResourceType => ResourceType;

        /// <summary> Get container. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        internal virtual Task<Response<ModelContainerResource>> GetAsync(CancellationToken cancellationToken = default)
        {
            throw new NotImplementedException();
        }

        /// <summary> Get container. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        internal virtual Response<ModelContainerResource> Get(CancellationToken cancellationToken = default)
        {
            throw new NotImplementedException();
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        internal virtual Task<IEnumerable<Location>> GetAvailableLocationsAsync(CancellationToken cancellationToken = default)
        {
            throw new NotImplementedException();
        }

        /// <summary> Lists all available geo-locations. </summary>
        /// <param name="cancellationToken"> A token to allow the caller to cancel the call to the service. The default value is <see cref="CancellationToken.None" />. </param>
        /// <returns> A collection of locations that may take multiple service requests to iterate over. </returns>
        internal virtual IEnumerable<Location> GetAvailableLocations(CancellationToken cancellationToken = default)
        {
            throw new NotImplementedException();
        }

        /// <summary> Delete container. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        internal virtual Task<Response> DeleteAsync(CancellationToken cancellationToken = default)
        {
            throw new NotImplementedException();
        }

        /// <summary> Delete container. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        internal virtual Response Delete(CancellationToken cancellationToken = default)
        {
            throw new NotImplementedException();
        }

        /// <summary> Delete container. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        internal virtual Task<ModelContainerDeleteOperation> StartDeleteAsync(CancellationToken cancellationToken = default)
        {
            throw new NotImplementedException();
        }

        /// <summary> Delete container. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        internal virtual ModelContainerDeleteOperation StartDelete(CancellationToken cancellationToken = default)
        {
            throw new NotImplementedException();
        }
    }
}
